// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GdeServiceClient is the client API for GdeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GdeServiceClient interface {
	// StartLocalAnalysis starts a Genetic Analysis on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the ode/config.yaml
	//   3. all bytes constituting the Genetic Analysis YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalAnalysis(ctx context.Context, opts ...grpc.CallOption) (GdeService_StartLocalAnalysisClient, error)
	// StartFromPreviousAnalysis starts a new Genetic Analysis based on a previous one.
	// If the previous Genetic Analysis does not have the can-replay condition set this call will result in an error.
	StartFromPreviousAnalysis(ctx context.Context, in *StartFromPreviousAnalysisRequest, opts ...grpc.CallOption) (*StartAnalysisResponse, error)
	// StartAnalysisRequest starts a new Genetic Analysis based on its specification.
	StartAnalysis(ctx context.Context, in *StartAnalysisRequest, opts ...grpc.CallOption) (*StartAnalysisResponse, error)
	// Searches for Genetic Analysis known to this instance
	ListAnalysis(ctx context.Context, in *ListAnalysisRequest, opts ...grpc.CallOption) (*ListAnalysisResponse, error)
	// Subscribe listens to new Genetic Analysis updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (GdeService_SubscribeClient, error)
	// GetAnalysis retrieves details of a single Analysis
	GetAnalysis(ctx context.Context, in *GetAnalysisRequest, opts ...grpc.CallOption) (*GetAnalysisResponse, error)
	// Listen listens to Genetic Analysis updates and log output of a running Genetic Analysis
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (GdeService_ListenClient, error)
	// StopAnalysis stops a currently running Genetic Analysis
	StopAnalysis(ctx context.Context, in *StopAnalysisRequest, opts ...grpc.CallOption) (*StopAnalysisResponse, error)
}

type gdeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGdeServiceClient(cc grpc.ClientConnInterface) GdeServiceClient {
	return &gdeServiceClient{cc}
}

func (c *gdeServiceClient) StartLocalAnalysis(ctx context.Context, opts ...grpc.CallOption) (GdeService_StartLocalAnalysisClient, error) {
	stream, err := c.cc.NewStream(ctx, &GdeService_ServiceDesc.Streams[0], "/v1.GdeService/StartLocalAnalysis", opts...)
	if err != nil {
		return nil, err
	}
	x := &gdeServiceStartLocalAnalysisClient{stream}
	return x, nil
}

type GdeService_StartLocalAnalysisClient interface {
	Send(*StartLocalAnalysisRequest) error
	CloseAndRecv() (*StartAnalysisResponse, error)
	grpc.ClientStream
}

type gdeServiceStartLocalAnalysisClient struct {
	grpc.ClientStream
}

func (x *gdeServiceStartLocalAnalysisClient) Send(m *StartLocalAnalysisRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gdeServiceStartLocalAnalysisClient) CloseAndRecv() (*StartAnalysisResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartAnalysisResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gdeServiceClient) StartFromPreviousAnalysis(ctx context.Context, in *StartFromPreviousAnalysisRequest, opts ...grpc.CallOption) (*StartAnalysisResponse, error) {
	out := new(StartAnalysisResponse)
	err := c.cc.Invoke(ctx, "/v1.GdeService/StartFromPreviousAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gdeServiceClient) StartAnalysis(ctx context.Context, in *StartAnalysisRequest, opts ...grpc.CallOption) (*StartAnalysisResponse, error) {
	out := new(StartAnalysisResponse)
	err := c.cc.Invoke(ctx, "/v1.GdeService/StartAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gdeServiceClient) ListAnalysis(ctx context.Context, in *ListAnalysisRequest, opts ...grpc.CallOption) (*ListAnalysisResponse, error) {
	out := new(ListAnalysisResponse)
	err := c.cc.Invoke(ctx, "/v1.GdeService/ListAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gdeServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (GdeService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &GdeService_ServiceDesc.Streams[1], "/v1.GdeService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &gdeServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GdeService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type gdeServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *gdeServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gdeServiceClient) GetAnalysis(ctx context.Context, in *GetAnalysisRequest, opts ...grpc.CallOption) (*GetAnalysisResponse, error) {
	out := new(GetAnalysisResponse)
	err := c.cc.Invoke(ctx, "/v1.GdeService/GetAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gdeServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (GdeService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &GdeService_ServiceDesc.Streams[2], "/v1.GdeService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &gdeServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GdeService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type gdeServiceListenClient struct {
	grpc.ClientStream
}

func (x *gdeServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gdeServiceClient) StopAnalysis(ctx context.Context, in *StopAnalysisRequest, opts ...grpc.CallOption) (*StopAnalysisResponse, error) {
	out := new(StopAnalysisResponse)
	err := c.cc.Invoke(ctx, "/v1.GdeService/StopAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GdeServiceServer is the server API for GdeService service.
// All implementations must embed UnimplementedGdeServiceServer
// for forward compatibility
type GdeServiceServer interface {
	// StartLocalAnalysis starts a Genetic Analysis on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the ode/config.yaml
	//   3. all bytes constituting the Genetic Analysis YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalAnalysis(GdeService_StartLocalAnalysisServer) error
	// StartFromPreviousAnalysis starts a new Genetic Analysis based on a previous one.
	// If the previous Genetic Analysis does not have the can-replay condition set this call will result in an error.
	StartFromPreviousAnalysis(context.Context, *StartFromPreviousAnalysisRequest) (*StartAnalysisResponse, error)
	// StartAnalysisRequest starts a new Genetic Analysis based on its specification.
	StartAnalysis(context.Context, *StartAnalysisRequest) (*StartAnalysisResponse, error)
	// Searches for Genetic Analysis known to this instance
	ListAnalysis(context.Context, *ListAnalysisRequest) (*ListAnalysisResponse, error)
	// Subscribe listens to new Genetic Analysis updates
	Subscribe(*SubscribeRequest, GdeService_SubscribeServer) error
	// GetAnalysis retrieves details of a single Analysis
	GetAnalysis(context.Context, *GetAnalysisRequest) (*GetAnalysisResponse, error)
	// Listen listens to Genetic Analysis updates and log output of a running Genetic Analysis
	Listen(*ListenRequest, GdeService_ListenServer) error
	// StopAnalysis stops a currently running Genetic Analysis
	StopAnalysis(context.Context, *StopAnalysisRequest) (*StopAnalysisResponse, error)
	mustEmbedUnimplementedGdeServiceServer()
}

// UnimplementedGdeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGdeServiceServer struct {
}

func (UnimplementedGdeServiceServer) StartLocalAnalysis(GdeService_StartLocalAnalysisServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalAnalysis not implemented")
}
func (UnimplementedGdeServiceServer) StartFromPreviousAnalysis(context.Context, *StartFromPreviousAnalysisRequest) (*StartAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousAnalysis not implemented")
}
func (UnimplementedGdeServiceServer) StartAnalysis(context.Context, *StartAnalysisRequest) (*StartAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAnalysis not implemented")
}
func (UnimplementedGdeServiceServer) ListAnalysis(context.Context, *ListAnalysisRequest) (*ListAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnalysis not implemented")
}
func (UnimplementedGdeServiceServer) Subscribe(*SubscribeRequest, GdeService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedGdeServiceServer) GetAnalysis(context.Context, *GetAnalysisRequest) (*GetAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalysis not implemented")
}
func (UnimplementedGdeServiceServer) Listen(*ListenRequest, GdeService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedGdeServiceServer) StopAnalysis(context.Context, *StopAnalysisRequest) (*StopAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAnalysis not implemented")
}
func (UnimplementedGdeServiceServer) mustEmbedUnimplementedGdeServiceServer() {}

// UnsafeGdeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GdeServiceServer will
// result in compilation errors.
type UnsafeGdeServiceServer interface {
	mustEmbedUnimplementedGdeServiceServer()
}

func RegisterGdeServiceServer(s grpc.ServiceRegistrar, srv GdeServiceServer) {
	s.RegisterService(&GdeService_ServiceDesc, srv)
}

func _GdeService_StartLocalAnalysis_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GdeServiceServer).StartLocalAnalysis(&gdeServiceStartLocalAnalysisServer{stream})
}

type GdeService_StartLocalAnalysisServer interface {
	SendAndClose(*StartAnalysisResponse) error
	Recv() (*StartLocalAnalysisRequest, error)
	grpc.ServerStream
}

type gdeServiceStartLocalAnalysisServer struct {
	grpc.ServerStream
}

func (x *gdeServiceStartLocalAnalysisServer) SendAndClose(m *StartAnalysisResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gdeServiceStartLocalAnalysisServer) Recv() (*StartLocalAnalysisRequest, error) {
	m := new(StartLocalAnalysisRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GdeService_StartFromPreviousAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GdeServiceServer).StartFromPreviousAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GdeService/StartFromPreviousAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GdeServiceServer).StartFromPreviousAnalysis(ctx, req.(*StartFromPreviousAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GdeService_StartAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GdeServiceServer).StartAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GdeService/StartAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GdeServiceServer).StartAnalysis(ctx, req.(*StartAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GdeService_ListAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GdeServiceServer).ListAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GdeService/ListAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GdeServiceServer).ListAnalysis(ctx, req.(*ListAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GdeService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GdeServiceServer).Subscribe(m, &gdeServiceSubscribeServer{stream})
}

type GdeService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type gdeServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *gdeServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GdeService_GetAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GdeServiceServer).GetAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GdeService/GetAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GdeServiceServer).GetAnalysis(ctx, req.(*GetAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GdeService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GdeServiceServer).Listen(m, &gdeServiceListenServer{stream})
}

type GdeService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type gdeServiceListenServer struct {
	grpc.ServerStream
}

func (x *gdeServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GdeService_StopAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GdeServiceServer).StopAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GdeService/StopAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GdeServiceServer).StopAnalysis(ctx, req.(*StopAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GdeService_ServiceDesc is the grpc.ServiceDesc for GdeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GdeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.GdeService",
	HandlerType: (*GdeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousAnalysis",
			Handler:    _GdeService_StartFromPreviousAnalysis_Handler,
		},
		{
			MethodName: "StartAnalysis",
			Handler:    _GdeService_StartAnalysis_Handler,
		},
		{
			MethodName: "ListAnalysis",
			Handler:    _GdeService_ListAnalysis_Handler,
		},
		{
			MethodName: "GetAnalysis",
			Handler:    _GdeService_GetAnalysis_Handler,
		},
		{
			MethodName: "StopAnalysis",
			Handler:    _GdeService_StopAnalysis_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalAnalysis",
			Handler:       _GdeService_StartLocalAnalysis_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _GdeService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _GdeService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gde.proto",
}
